name: Automatic tests pipeline

on: 
   push:
   pull_request: 
      types: [opened]
   issue_comment:
      types: ['created']
    

jobs:
#--- Build the package and save as artifacts----
   packageing:
      name: Build the package
      runs-on: ubuntu-latest
      outputs:
        pkg_file: ${{ steps.base_def.outputs.filename }}
      steps:
      - uses: khan/pull-request-comment-trigger@v1.1.0
        id: check
        with:
          trigger: '@deploy'
          reaction: rocket
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - run: 'echo Found it!'
        if: steps.check.outputs.triggered == 'true'
        
      #Will be triggerd when pushing to main/dev or when 'run_tests' is in the commit message
      if: |
        github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || steps.check.outputs.triggered
      
        - uses: actions/checkout@v3
        - name: Set up Python39
          uses: actions/setup-python@v4
          with:
            python-version: '3.9'
            #cache: 'poetry'
        # You can test your matrix by printing the current Python version
        - name: Display Python version
          run: python -c "import sys; print(sys.version)"
        - name: remove previous builds
          run: |
              rm -f dist/metobs_toolkit-*.whl
              rm -f dist/metobs_toolkit-*.tar.gz
        - name: Install poetry
          run: |
              pip install poetry
        - name: Install dependencies and build
          run: |
              #poetry update --without titan,documentation
              #poetry install --without titan,documentation
              poetry update
              poetry install 
              poetry build
        - name: get distribution file name
          id: base_def
          run: |
              rel_path=$(find dist/ -name 'valenspy-*.tar.gz' -print -quit)
              echo "filename=$(basename "$rel_path")" >> $GITHUB_OUTPUT

        - name: save package as artifact
          uses: actions/upload-artifact@v3
          with:
            name: package_build
            path: dist/*.tar.gz

# ---- Installing the package test ------#
   #--- Package os installation ---
   mac_install_testing:
     name: Installation on Mac latest
     needs: packageing
     runs-on: macos-latest
     steps:
       - uses: actions/checkout@v3
       - name: Set up Python39
         uses: actions/setup-python@v4
         with:
           python-version: "3.9"
       - name: Download the package build
         uses: actions/download-artifact@v3
         with:
           name: package_build

       - name: Install the package
         run: |
             python3 -m pip install ${{needs.packageing.outputs.pkg_file}}
       - name: Run tests
         run: |
             python tests/push_tests/import_test.py

   windows_install_testing:
     name: Installation on Windows latest
     needs: packageing
     runs-on: windows-latest
     steps:
       - uses: actions/checkout@v3
       - name: Set up Python39
         uses: actions/setup-python@v4
         with:
           python-version: "3.9"
       - name: Download the package build
         uses: actions/download-artifact@v3
         with:
           name: package_build

       - name: Install the package
         run: |
             python3 -m pip install ${{needs.packageing.outputs.pkg_file}}
       - name: Run tests
         run: |
             python tests\push_tests\import_test.py


#---- Version Control -----#
   versiontest:
     name: check if version is valid
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v3
       - name: get version
         id: 'version_info'
         run: |
           CURRENT_VERSION="$(grep -oP '__version__ = "\K\d+\.\d+\.\d+' src/valenspy/__init__.py)"
           echo "current version (init) = ${CURRENT_VERSION}"
           echo "::set-output name=current_version::$CURRENT_VERSION"
           PYPROJECT_VERSION="$(grep -oP 'version = "\K\d+\.\d+\.\d+' pyproject.toml)"
           echo "current version (pyproject) = ${PYPROJECT_VERSION}"
           echo "::set-output name=pyproject_version::$PYPROJECT_VERSION"
       - name: version-is-correct
         if: ${{ steps.version_info.outputs.current_version != steps.version_info.outputs.pyproject_version }}
         run: |
           echo "version tags are not aligned!"
           exit 1
      
